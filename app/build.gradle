apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def keystorePropertiesFile = rootProject.file("./keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "ru.luckycactus.steamroulette"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 9
        versionName "1.2.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
    }
    buildTypes.each {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        def steamWebApiKey = properties.getProperty("steam_web_api_key", "")

        it.buildConfigField 'String', "STEAM_WEB_API_KEY", steamWebApiKey
        it.resValue 'string', "steam_web_api_key", steamWebApiKey
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    androidExtensions {
        experimental = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    signingConfigs {
        release {
            try {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } catch (ex) {
                throw new InvalidUserDataException("You should define keystore.properties.")
            }
        }
    }
    kapt {
        arguments {
            arg("dagger.formatGeneratedSource", "disabled")
            arg("dagger.gradle.incremental", "enabled")
        }
        javacOptions {
            // Increase the max count of errors from annotation processors.
            // Default is 100.
            option("-Xmaxerrs", 500)
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.time.ExperimentalTime"]
    kotlinOptions.freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5"

    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"

    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"
    implementation "androidx.room:room-ktx:2.2.5"

    implementation "androidx.paging:paging-runtime-ktx:2.1.2"
    testImplementation "androidx.paging:paging-common-ktx:2.1.2"

    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0-rc01'

    implementation "androidx.core:core-ktx:1.2.0"
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.4'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation "com.google.android.material:material:1.2.0-alpha05"

    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    api "com.squareup.okhttp3:logging-interceptor:3.11.0"
    implementation "com.squareup.moshi:moshi:1.9.2"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.9.2"
    implementation "com.squareup.retrofit2:converter-moshi:2.8.1"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.11.0'
    implementation 'com.github.stfalcon:stfalcon-imageviewer:1.0.0'

    //implementation "androidx.browser:browser:1.2.0"

    implementation 'jp.wasabeef:glide-transformations:4.1.0'

    //implementation 'com.google.firebase:firebase-analytics:17.2.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    implementation "com.google.dagger:dagger:2.24"
    kapt "com.google.dagger:dagger-compiler:2.24"
    compileOnly "javax.annotation:jsr250-api:1.0"
    compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.5.2'
    kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.5.2'

    implementation 'ru.terrakok.cicerone:cicerone:5.1.0'

    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.gms.google-services'
